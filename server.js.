const express = require('express');
const dotenv = require('dotenv');
const xml2js = require('xml2js');
const fetch = require('node-fetch');
const path = require('path');
const querystring = require('querystring');

dotenv.config();
const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());
app.use(express.static(path.join(__dirname, '.')));

const CJ_TOKEN = process.env.CJ_TOKEN;
const CJ_WEBSITE_ID = process.env.CJ_WEBSITE_ID;
const EBAY_CLIENT_ID = process.env.EBAY_CLIENT_ID;
const EBAY_CLIENT_SECRET = process.env.EBAY_CLIENT_SECRET;
const EBAY_REDIRECT_URI = 'https://getcomparley.com/oauth/callback';
const EBAY_TOKEN_URL = 'https://api.ebay.com/identity/v1/oauth2/token';
let ebayAccessToken = '';

app.get('/oauth/initiate', (req, res) => {
    const authUrl = `https://signin.ebay.com/authorize?${querystring.stringify({
        client_id: EBAY_CLIENT_ID,
        redirect_uri: EBAY_REDIRECT_URI,
        response_type: 'code',
        scope: 'https://api.ebay.com/oauth/api_scope'
    })}`;
    res.redirect(authUrl);
});

app.get('/oauth/callback', async (req, res) => {
    const { code } = req.query;
    if (!code) return res.status(400).send('Authorization code missing');

    try {
        const response = await fetch(EBAY_TOKEN_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': 'Basic ' + Buffer.from(`${EBAY_CLIENT_ID}:${EBAY_CLIENT_SECRET}`).toString('base64')
            },
            body: querystring.stringify({
                grant_type: 'authorization_code',
                code: code,
                redirect_uri: EBAY_REDIRECT_URI
            })
        });

        const data = await response.json();
        ebayAccessToken = data.access_token;
        res.redirect('/');
    } catch (error) {
        res.status(500).send('Error exchanging code for token');
    }
});

app.get('/oauth/declined', (req, res) => {
    res.send('<h1>Authorization Declined</h1><p>Please try again. <a href="/">Back to Home</a></p>');
});

app.get('/api/stores', (req, res) => {
    const stores = require('./stores.json');
    res.json(stores);
});

app.post('/api/search', async (req, res) => {
    const { keywords, stores, category } = req.body;
    let selectedStores = stores.length > 0 ? stores : [];
    const allStores = require('./stores.json');

    if (!selectedStores.length && category) {
        selectedStores = allStores
            .filter(store => store.categories.includes(category))
            .map(store => store.id);
    }

    const results = [];
    for (const storeId of selectedStores) {
        const store = allStores.find(s => s.id === storeId);
        if (store.id === 'ebay') {
            const ebayResults = await searchEbay(keywords, category);
            results.push(...ebayResults);
        } else {
            const cjResults = await searchCJ(keywords, storeId);
            results.push(...cjResults);
        }
    }

    res.json(results);
});

app.post('/api/trust-us-search', async (req, res) => {
    const { keywords } = req.body;
    const allStores = require('./stores.json');
    const selectedStores = allStores.slice(0, 6).map(store => store.id);
    const results = [];

    for (const storeId of selectedStores) {
        const store = allStores.find(s => s.id === storeId);
        if (store.id === 'ebay') {
            const ebayResults = await searchEbay(keywords);
            results.push(...ebayResults);
        } else {
            const cjResults = await searchCJ(keywords, storeId);
            results.push(...cjResults);
        }
    }

    res.json(results);
});

async function searchCJ(keywords, advertiserId) {
    const url = `https://ads.api.cj.com/v2/product-catalog-search?${querystring.stringify({
        'website-id': CJ_WEBSITE_ID,
        keywords: keywords,
        'advertiser-ids': advertiserId,
        currency: 'USD'
    })}`;

    const response = await fetch(url, {
        headers: { 'Authorization': `Bearer ${CJ_TOKEN}` }
    });

    const xml = await response.text();
    const parser = new xml2js.Parser();
    const data = await parser.parseStringPromise(xml);

    const products = data['product-catalog-search'].products[0].product || [];
    return products.map(product => ({
        name: product.name[0],
        store: (require('./stores.json').find(s => s.id === advertiserId)).name,
        price: parseFloat(product.price[0]),
        description: product.description[0],
        rating: null,
        shipping: product['in-stock'][0] === 'yes' ? 'In Stock' : 'Out of Stock',
        image: product['image-url'][0],
        buyLink: product['buy-url'][0]
    }));
}

async function searchEbay(keywords, category) {
    const categoryIds = {
        tools: '11700',
        furniture: '3197',
        bedbath: '20444',
        toys: '220',
        jewelry: '10968',
        sports: '888',
        outdoors: '159136',
        books: '267',
        electronics: '293',
        garden: '159912',
        apparel: '11450',
        shoes: '11450',
        fragrance: '180345',
        homeappliances: '20710',
        gifts: '26395',
        pets: '1281',
        mens: '11450',
        computers: '58058',
        games: '1249'
    };

    const url = `https://svcs.ebay.com/services/search/FindingService/v1?${querystring.stringify({
        'SECURITY-APPNAME': EBAY_CLIENT_ID,
        'OPERATION-NAME': 'findItemsAdvanced',
        'SERVICE-VERSION': '1.0.0',
        'RESPONSE-DATA-FORMAT': 'JSON',
        keywords: keywords,
        categoryId: category ? categoryIds[category] : undefined
    })}`;

    const response = await fetch(url);
    const data = await response.json();
    const items = data.findItemsAdvancedResponse?.[0]?.searchResult?.[0]?.item || [];

    return items.map(item => ({
        name: item.title[0],
        store: 'eBay',
        price: parseFloat(item.sellingStatus[0].currentPrice[0].__value__),
        description: item.subtitle?.[0] || 'N/A',
        rating: item.sellerInfo?.[0]?.feedbackScore?.[0] || 'N/A',
        shipping: item.shippingInfo[0].shippingServiceCost?.[0]?.__value__ === '0.0' ? 'Free Shipping' : 'Shipping at Checkout',
        image: item.galleryURL[0],
        buyLink: item.viewItemURL[0]
    }));
}

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
